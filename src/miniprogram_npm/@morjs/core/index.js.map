{"version":3,"sources":["index.js","app.js","utils/constants.js","utils/init.js","plugins/contextPlugin.js","plugins/eventPlugin.js","utils/invokeOriginalFunction.js","component.js","utils/invokeHook.js","page.js","utils/isPromise.js","pageToComponent.js","plugin.js","utils/polyfill.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AIZA,AFMA,ACHA;AFOA,ADGA,AIZA,AFMA,ACHA;AFOA,ADGA,AIZA,AFMA,ACHA;AFOA,ADGA,AIZA,ACHA,AHSA,ACHA;AFOA,ADGA,AIZA,ACHA,AHSA,ACHA;AFOA,ADGA,AIZA,ACHA,AHSA,ACHA;AFOA,ADGA,AIZA,ACHA,AHSA,ACHA,AGTA;ALgBA,ADGA,AIZA,ACHA,AHSA,ACHA,AGTA;ALgBA,ADGA,AIZA,ACHA,AHSA,ACHA,AGTA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AHSA,ACHA,AGTA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AHSA,ACHA,AGTA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AFMA,AGTA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AIZA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AS3BA,ALeA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AS3BA,ALeA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AS3BA,ALeA,ACHA,AFMA,AKfA,AFMA;ALgBA,AMlBA,APqBA,AS3BA,ALeA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,APqBA,AS3BA,ALeA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,ALeA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,APqBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,APqBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,APqBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AFMA,AKfA,AFMA,AIZA;AT4BA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AFMA,AKfA,AFMA,AIZA,AGTA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AFMA,AOrBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AKfA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AKfA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AKfA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AKfA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AGTA,AKfA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ARwBA,ACHA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,APqBA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,APqBA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,APqBA,AQxBA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA,ACHA;AZqCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA,ACHA;AXkCA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AV+BA,AMlBA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJaA,AENA,AENA;AJafile":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.init = exports.wPageToComponent = exports.aPageToComponent = exports.PageToComponent = exports.wPlugin = exports.aPlugin = exports.createPlugin = exports.enhancePage = exports.createPage = exports.registerComponentAdapters = exports.wComponent = exports.aComponent = exports.enhanceComponent = exports.createComponent = exports.registerPageAdapters = exports.wPage = exports.aPage = exports.registerAppAdapters = exports.wApp = exports.aApp = exports.createApp = void 0;\nvar app_1 = require(\"./app\");\nObject.defineProperty(exports, \"aApp\", { enumerable: true, get: function () { return app_1.aApp; } });\nObject.defineProperty(exports, \"createApp\", { enumerable: true, get: function () { return app_1.createApp; } });\nObject.defineProperty(exports, \"registerAppAdapters\", { enumerable: true, get: function () { return app_1.registerAppAdapters; } });\nObject.defineProperty(exports, \"wApp\", { enumerable: true, get: function () { return app_1.wApp; } });\nvar component_1 = require(\"./component\");\nObject.defineProperty(exports, \"aComponent\", { enumerable: true, get: function () { return component_1.aComponent; } });\nObject.defineProperty(exports, \"createComponent\", { enumerable: true, get: function () { return component_1.createComponent; } });\nObject.defineProperty(exports, \"enhanceComponent\", { enumerable: true, get: function () { return component_1.enhanceComponent; } });\nObject.defineProperty(exports, \"registerComponentAdapters\", { enumerable: true, get: function () { return component_1.registerComponentAdapters; } });\nObject.defineProperty(exports, \"wComponent\", { enumerable: true, get: function () { return component_1.wComponent; } });\nvar page_1 = require(\"./page\");\nObject.defineProperty(exports, \"aPage\", { enumerable: true, get: function () { return page_1.aPage; } });\nObject.defineProperty(exports, \"createPage\", { enumerable: true, get: function () { return page_1.createPage; } });\nObject.defineProperty(exports, \"enhancePage\", { enumerable: true, get: function () { return page_1.enhancePage; } });\nObject.defineProperty(exports, \"registerPageAdapters\", { enumerable: true, get: function () { return page_1.registerPageAdapters; } });\nObject.defineProperty(exports, \"wPage\", { enumerable: true, get: function () { return page_1.wPage; } });\nvar pageToComponent_1 = require(\"./pageToComponent\");\nObject.defineProperty(exports, \"aPageToComponent\", { enumerable: true, get: function () { return pageToComponent_1.aPageToComponent; } });\nObject.defineProperty(exports, \"PageToComponent\", { enumerable: true, get: function () { return pageToComponent_1.PageToComponent; } });\nObject.defineProperty(exports, \"wPageToComponent\", { enumerable: true, get: function () { return pageToComponent_1.wPageToComponent; } });\nvar plugin_1 = require(\"./plugin\");\nObject.defineProperty(exports, \"aPlugin\", { enumerable: true, get: function () { return plugin_1.aPlugin; } });\nObject.defineProperty(exports, \"createPlugin\", { enumerable: true, get: function () { return plugin_1.createPlugin; } });\nObject.defineProperty(exports, \"wPlugin\", { enumerable: true, get: function () { return plugin_1.wPlugin; } });\nvar init_1 = require(\"./utils/init\");\nObject.defineProperty(exports, \"init\", { enumerable: true, get: function () { return init_1.init; } });\nrequire(\"./utils/polyfill\");\n//# sourceMappingURL=index.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wApp = exports.aApp = exports.registerAppAdapters = exports.createApp = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\nvar constants_1 = require(\"./utils/constants\");\nvar init_1 = require(\"./utils/init\");\nvar invokeOriginalFunction_1 = require(\"./utils/invokeOriginalFunction\");\n// 跨端支持的应用运行时引用注入位置, '' 空字符串是为了防止该注释被移除\n// prettier-ignore\n/* MOR_APP_POLYFILL_IMPORT_REPLACER */ '';\n// 转端适配器\nvar APP_ADAPTERS = [];\n// 初始化标记\nvar IS_INITIALIZED = false;\n// 全局应用事件\nvar APP_EVENT_MAPPINGS = {\n    onPageNotFound: 'appOnPageNotFound',\n    onUnhandledRejection: 'appOnUnhandledRejection'\n};\n/**\n * 注入 app 生命周期 hook\n * @param appOptions 小程序 app 初始化 options\n */\nfunction hookAppLifeCycle(appOptions) {\n    var _a, _b, _c;\n    /**\n     * 调用 hook\n     * @param hookName hook名字\n     */\n    var invokeHook = function (hookName) {\n        return function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            (_a = this.$morHooks[hookName]).call.apply(_a, tslib_1.__spreadArray([this], args, false));\n        };\n    };\n    /**\n     * 调用事件通知\n     * @param eventName 事件标识\n     */\n    var invokeEvent = function (eventName) {\n        return function (arg) {\n            if (this.$event) {\n                this.$event.emit(\"\".concat(constants_1.MOR_EVENT_PREFIX).concat(eventName), arg);\n            }\n        };\n    };\n    appOptions.onLaunch = (0, api_1.compose)([\n        invokeHook('appOnLaunch'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onLaunch', appOptions)\n    ]);\n    appOptions.onShow = (0, api_1.compose)([\n        invokeHook('appOnShow'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onShow', appOptions),\n        invokeEvent('appOnShow')\n    ]);\n    appOptions.onHide = (0, api_1.compose)([\n        invokeHook('appOnHide'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onHide', appOptions),\n        invokeEvent('appOnHide')\n    ]);\n    appOptions.onError = (0, api_1.compose)([\n        invokeHook('appOnError'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onError', appOptions)\n    ]);\n    // 这里的事件可能会改变小程序本身的行为, 故这里单独处理\n    for (var eventName in APP_EVENT_MAPPINGS) {\n        var hookName = APP_EVENT_MAPPINGS[eventName];\n        if (hookName &&\n            (appOptions[eventName] || ((_c = (_b = (_a = appOptions.$morHooks) === null || _a === void 0 ? void 0 : _a[hookName]) === null || _b === void 0 ? void 0 : _b.isUsed) === null || _c === void 0 ? void 0 : _c.call(_b)))) {\n            appOptions[eventName] = (0, api_1.compose)([\n                invokeHook(hookName),\n                (0, invokeOriginalFunction_1.invokeOriginalFunction)(eventName, appOptions)\n            ]);\n        }\n    }\n}\n/**\n * 注册 App\n */\nfunction createApp(options, \n/**\n * 运行时 Solution 支持\n */\nsolution, \n/**\n * 拓展参数\n */\nextend) {\n    api_1.logger.time('createApp-init');\n    // 配置 globalApp 的时候不检查多实例的问题\n    // 原因： 允许插件或分包工程使用模拟 App\n    //       这种情况下一个小程序会出现多个 App 初始化\n    if (!(extend === null || extend === void 0 ? void 0 : extend.globalApp)) {\n        if (IS_INITIALIZED) {\n            api_1.logger.error('App 有且只能执行一次!');\n            return;\n        }\n        else {\n            IS_INITIALIZED = true;\n        }\n    }\n    var appOptions = tslib_1.__assign({}, options);\n    api_1.logger.time('app-init-solution');\n    var _a = (0, init_1.init)(solution), $hooks = _a.$hooks, pluginsNames = _a.pluginsNames;\n    api_1.logger.timeEnd('app-init-solution');\n    if (extend === null || extend === void 0 ? void 0 : extend.onHooksCreated) {\n        if (typeof extend.onHooksCreated !== 'function') {\n            api_1.logger.error('onHooksCreated 必须是函数, 请检查 App 的 extends 配置');\n            return;\n        }\n        extend.onHooksCreated($hooks);\n    }\n    // 添加到 App 实例中\n    appOptions.$morHooks = $hooks;\n    appOptions.$morPluginsNames = pluginsNames;\n    // 触发 appOnConstruct hook, 兼容旧版本当 appOnConstruct 不存在时用 appOnInit 兜底\n    var appOnConstruct = $hooks.appOnConstruct || $hooks.appOnInit;\n    appOnConstruct.call(appOptions, appOptions);\n    // 生命周期 hook\n    api_1.logger.time('app-hook-lifetimes');\n    hookAppLifeCycle(appOptions);\n    api_1.logger.timeEnd('app-hook-lifetimes');\n    // 跨端支持的应用运行时调用注入位置, '' 空字符串是为了防止该注释被移除\n    // prettier-ignore\n    /* MOR_APP_POLYFILL_INVOKE_REPLACER */ '';\n    // 执行 app 适配器初始化\n    if (APP_ADAPTERS === null || APP_ADAPTERS === void 0 ? void 0 : APP_ADAPTERS.length) {\n        APP_ADAPTERS.forEach(function (adapter) {\n            if (typeof (adapter === null || adapter === void 0 ? void 0 : adapter.initApp) === 'function') {\n                adapter.initApp(appOptions);\n            }\n            else {\n                api_1.logger.error(\"adapter.initApp \\u5FC5\\u987B\\u662F\\u4E00\\u4E2A\\u51FD\\u6570, \\u8BF7\\u68C0\\u67E5\");\n            }\n        });\n    }\n    api_1.logger.timeEnd('app-init');\n    // 使用 extend.globalApp 替代 App\n    // 用于 插件和分包模式下的 App 构造函数模拟\n    if (extend === null || extend === void 0 ? void 0 : extend.globalApp) {\n        if (typeof extend.globalApp !== 'function') {\n            api_1.logger.error('globalApp 必须是函数, 请检查 App 的 extends 配置');\n            return;\n        }\n        return extend.globalApp(appOptions);\n    }\n    else {\n        return App(appOptions);\n    }\n}\nexports.createApp = createApp;\n/**\n * 注册应用转端适配器\n * @param adapters - 应用转端适配器\n */\nfunction registerAppAdapters(adapters) {\n    APP_ADAPTERS.push.apply(APP_ADAPTERS, (0, api_1.asArray)(adapters));\n}\nexports.registerAppAdapters = registerAppAdapters;\n/**\n * 注册支付宝小程序 App\n */\nexports.aApp = createApp;\n/**\n * 注册微信小程序 App\n */\nexports.wApp = createApp;\n//# sourceMappingURL=app.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APP_ON_HIDE_EVENT = exports.APP_ON_SHOW_EVENT = exports.MOR_EVENT_METHOD_PREFIX = exports.MOR_EVENT_PREFIX = void 0;\n/**\n * mor 事件名称前缀\n */\nexports.MOR_EVENT_PREFIX = '$mor:';\n/**\n * mor 注入的事件方法前缀\n */\nexports.MOR_EVENT_METHOD_PREFIX = \"\".concat(exports.MOR_EVENT_PREFIX, \"event:\");\n/**\n * 监听 app 事件名称\n */\nexports.APP_ON_SHOW_EVENT = \"\".concat(exports.MOR_EVENT_PREFIX, \"appOnShow\");\nexports.APP_ON_HIDE_EVENT = \"\".concat(exports.MOR_EVENT_PREFIX, \"appOnHide\");\n//# sourceMappingURL=constants.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.init = void 0;\nvar api_1 = require(\"@morjs/api\");\nvar contextPlugin_1 = require(\"../plugins/contextPlugin\");\nvar eventPlugin_1 = require(\"../plugins/eventPlugin\");\nvar IS_DEFAULT_HOOKS_USED = false;\n/**\n * 初始化, 创建 $hooks 及应用 solutions\n * @param solution 解决方案\n */\nfunction init(solution) {\n    var solutions = [\n        function () {\n            return {\n                plugins: [new eventPlugin_1.EventPlugin(), new contextPlugin_1.ContextPlugin()]\n            };\n        }\n    ].concat((0, api_1.asArray)(solution));\n    var $hooks = IS_DEFAULT_HOOKS_USED\n        ? (0, api_1.createHooks)('initWithSolutions')\n        : api_1.hooks;\n    IS_DEFAULT_HOOKS_USED = true;\n    var pluginsNames = (0, api_1.applySolutions)($hooks, solutions);\n    return {\n        $hooks: $hooks,\n        pluginsNames: pluginsNames\n    };\n}\nexports.init = init;\n//# sourceMappingURL=init.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextPlugin = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\n/**\n * context 插件\n */\nvar ContextPlugin = /** @class */ (function () {\n    function ContextPlugin() {\n        var _this = this;\n        this.pluginName = 'MorContextPlugin';\n        this.apply = function (hooks) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var $plugin = _this;\n            hooks.appOnInit.tap(_this.pluginName, function (appOptions) {\n                if (appOptions.$context) {\n                    api_1.logger.error($plugin.pluginName, '请去除业务代码中的对 $context 的赋值，防止出现不可预知的问题。');\n                }\n            });\n            hooks.appOnLaunch.tap(_this.pluginName, function (options) {\n                var query = tslib_1.__assign({}, ((options === null || options === void 0 ? void 0 : options.query) || {}));\n                this.$context = { appQuery: query };\n            });\n            hooks.pageOnInit.tap(_this.pluginName, function (pageOptions) {\n                if (pageOptions.$context) {\n                    api_1.logger.error($plugin.pluginName, '请去除业务代码中的对 $context 的赋值，防止出现不可预知的问题。');\n                }\n            });\n            hooks.pageOnLoad.tap(_this.pluginName, function (query) {\n                var _a, _b;\n                var appQuery = {};\n                if (typeof getApp !== 'undefined' && ((_a = getApp()) === null || _a === void 0 ? void 0 : _a.$context)) {\n                    appQuery = ((_b = getApp().$context) === null || _b === void 0 ? void 0 : _b.appQuery) || {};\n                }\n                this.$context = {\n                    pageQuery: query,\n                    appQuery: appQuery\n                };\n            });\n        };\n    }\n    return ContextPlugin;\n}());\nexports.ContextPlugin = ContextPlugin;\n//# sourceMappingURL=contextPlugin.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventPlugin = void 0;\nvar api_1 = require(\"@morjs/api\");\n// 默认 event 使用标记\nvar IS_DEFAULT_EVENT_USED = false;\n/**\n * event 插件\n */\nvar EventPlugin = /** @class */ (function () {\n    function EventPlugin() {\n        var _this = this;\n        this.pluginName = 'MorEventPlugin';\n        this.apply = function (hooks) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var $plugin = _this;\n            // 优先使用全局 event\n            var $event = IS_DEFAULT_EVENT_USED\n                ? (0, api_1.createEvent)('createByMorEventPlugin')\n                : api_1.event;\n            IS_DEFAULT_EVENT_USED = true;\n            // app 注入 $event\n            hooks.appOnInit.tap(_this.pluginName, function (appOptions) {\n                if (appOptions.$event) {\n                    api_1.logger.error($plugin.pluginName, '请去除业务代码中的对 $event 的赋值，防止出现不可预知的问题。');\n                }\n                appOptions.$event = $event;\n            });\n            // 由于存在非 createApp 初始化的情况，appOnLaunch 的时候补偿加一下\n            hooks.appOnLaunch.tap(_this.pluginName, function () {\n                if (!this.$event)\n                    this.$event = $event;\n            });\n            // 页面注入 $event\n            hooks.pageOnInit.tap(_this.pluginName, function (pageOptions) {\n                if (pageOptions.$event) {\n                    api_1.logger.error($plugin.pluginName, '请去除业务代码中的对 $event 的赋值，防止出现不可预知的问题。');\n                }\n                pageOptions.$event = $event;\n            });\n        };\n    }\n    return EventPlugin;\n}());\nexports.EventPlugin = EventPlugin;\n//# sourceMappingURL=eventPlugin.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.invokeOriginalFunction = void 0;\nvar tslib_1 = require(\"tslib\");\n/**\n * 调用原本的生命周期函数\n * @param fnName 事件名\n * @param obj 事件方法来源\n * @param shouldDeleteProperty 是否移除属性, 一些生命周期函数需要保存后并移除, 以避免重复触发\n */\nvar invokeOriginalFunction = function (fnName, obj, shouldDeleteProperty) {\n    if (shouldDeleteProperty === void 0) { shouldDeleteProperty = false; }\n    var originalFn = obj[fnName];\n    if (shouldDeleteProperty && obj && fnName && fnName in obj) {\n        delete obj[fnName];\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (originalFn && typeof originalFn === 'function') {\n            return originalFn.call.apply(originalFn, tslib_1.__spreadArray([this], args, false));\n        }\n    };\n};\nexports.invokeOriginalFunction = invokeOriginalFunction;\n//# sourceMappingURL=invokeOriginalFunction.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wComponent = exports.aComponent = exports.registerComponentAdapters = exports.createComponent = exports.enhanceComponent = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\nvar constants_1 = require(\"./utils/constants\");\nvar invokeHook_1 = require(\"./utils/invokeHook\");\nvar invokeOriginalFunction_1 = require(\"./utils/invokeOriginalFunction\");\n// 跨端支持的组件运行时引用注入位置, '' 空字符串是为了防止该注释被移除\n// prettier-ignore\n/* MOR_COMPONENT_POLYFILL_IMPORT_REPLACER */ '';\n// 转端适配器\nvar COMPONENT_ADAPTERS = [];\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nvar emptyFn = function () { };\n/**\n * hook 组件生命周期\n */\nfunction hookComponentLifeCycle(componentOptions, needsToHookPageLifetimes, sourceType, invokeComponentHooks) {\n    if (invokeComponentHooks === void 0) { invokeComponentHooks = true; }\n    var isAlipaySource = sourceType === api_1.SOURCE_TYPE.ALIPAY;\n    /**\n     * 设置基础信息\n     */\n    var makeBaseInfo = function () {\n        if (!this.$morId)\n            this.$morId = String((0, api_1.generateId)());\n    };\n    /**\n     * 做 pageLifetimes 的事件绑定\n     * @param this 当前组件实例\n     */\n    var registerPageLifetimes = function () {\n        var _a;\n        // 这里检查 getCurrentPages 是否存在，防止导致整个应用崩溃\n        // 目的是部分小程序页面转 H5 时，缺少完整的小程序 runtime polyfill 而直接报错\n        if (typeof getCurrentPages === 'undefined') {\n            api_1.logger.error('未发现 getCurrentPages 方法, 无法自动获取当前页面实例, pageLifetimes 相关事件注册失败');\n            return;\n        }\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        var allPages = getCurrentPages() || [];\n        // 在当前组件中保存 所在页面的标记\n        var pageFlag = (this.$morCurrentPageFlag =\n            (_a = allPages[allPages.length - 1]) === null || _a === void 0 ? void 0 : _a.$morPageFlag);\n        if (!pageFlag || !$event) {\n            api_1.logger.warn('当前运行环境缺乏 $event 或 $morPageFlag 支持, ' +\n                '请检查页面是否采用了 createPage/aPage/wPage 以及 App 是否初始化正确');\n            return;\n        }\n        // 避免不重复添加\n        if (this.$morPageLifetimesIsHooked)\n            return;\n        this.$morPageOnShow = this.$morPageOnShow.bind(this);\n        this.$morPageOnHide = this.$morPageOnHide.bind(this);\n        this.$morPageOnResize = this.$morPageOnResize.bind(this);\n        $event.once(\"$mor:pageOnReady:\".concat(pageFlag), this.$morPageOnShow);\n        $event.on(\"$mor:pageOnShow:\".concat(pageFlag), this.$morPageOnShow);\n        $event.on(\"$mor:pageOnHide:\".concat(pageFlag), this.$morPageOnHide);\n        $event.on(\"$mor:pageOnResize:\".concat(pageFlag), this.$morPageOnResize);\n        this.$morPageLifetimesIsHooked = true;\n    };\n    /**\n     * 去除pageLifetime的事件绑定\n     */\n    var unregisterPageLifetimes = function () {\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        if (!$event)\n            return;\n        if (!this.$morCurrentPageFlag)\n            return;\n        var pageFlag = this.$morCurrentPageFlag;\n        $event.off(\"$mor:pageOnReady:\".concat(pageFlag), this.$morPageOnShow);\n        $event.off(\"$mor:pageOnShow:\".concat(pageFlag), this.$morPageOnShow);\n        $event.off(\"$mor:pageOnHide:\".concat(pageFlag), this.$morPageOnHide);\n        $event.off(\"$mor:pageOnResize:\".concat(pageFlag), this.$morPageOnResize);\n    };\n    /**\n     * 增加 $eventListener 事件绑定\n     * @param this 当前组件实例\n     */\n    var addEventListeners = function () {\n        var _this = this;\n        var _a, _b;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        if (!$event)\n            return;\n        if (!((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.$morEventListenerNames) === null || _b === void 0 ? void 0 : _b.length))\n            return;\n        // 在当前组件实例中添加 事件\n        this.data.$morEventListenerNames.forEach(function (eventName) {\n            var morEventName = \"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName);\n            _this[morEventName] = _this[morEventName].bind(_this);\n            $event.on(eventName, _this[morEventName]);\n        });\n    };\n    /**\n     * 去除 $eventListener 事件绑定\n     */\n    var removeEventListeners = function () {\n        var _this = this;\n        var _a, _b;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        if (!$event)\n            return;\n        if (!((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.$morEventListenerNames) === null || _b === void 0 ? void 0 : _b.length))\n            return;\n        this.data.$morEventListenerNames.forEach(function (eventName) {\n            var morEventName = \"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName);\n            $event.off(eventName, _this[morEventName]);\n        });\n    };\n    var lifetimes = isAlipaySource\n        ? componentOptions\n        : componentOptions.lifetimes;\n    // 支付宝 DSL 支持\n    if (isAlipaySource) {\n        // onInit\n        lifetimes.onInit = (0, api_1.compose)([\n            needsToHookPageLifetimes ? registerPageLifetimes : emptyFn,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnInit') : emptyFn,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('onInit', lifetimes)\n        ]);\n        // didMount\n        componentOptions.didMount = (0, api_1.compose)([\n            needsToHookPageLifetimes ? registerPageLifetimes : emptyFn,\n            makeBaseInfo,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentDidMount') : emptyFn,\n            addEventListeners,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('didMount', lifetimes)\n        ]);\n        // didUnmount\n        componentOptions.didUnmount = (0, api_1.compose)([\n            needsToHookPageLifetimes ? unregisterPageLifetimes : emptyFn,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentDidUnmount') : emptyFn,\n            removeEventListeners,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('didUnmount', componentOptions)\n        ]);\n        // onError\n        componentOptions.onError = (0, api_1.compose)([\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnError') : emptyFn,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('onError', componentOptions)\n        ]);\n    }\n    // 微信 DSL 支持\n    else {\n        // created\n        lifetimes.created = (0, api_1.compose)([\n            needsToHookPageLifetimes ? registerPageLifetimes : emptyFn,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnCreated') : emptyFn,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('created', lifetimes)\n        ]);\n        // attached\n        lifetimes.attached = (0, api_1.compose)([\n            needsToHookPageLifetimes ? registerPageLifetimes : emptyFn,\n            makeBaseInfo,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnAttached') : emptyFn,\n            addEventListeners,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('attached', lifetimes)\n        ]);\n        // detached\n        lifetimes.detached = (0, api_1.compose)([\n            needsToHookPageLifetimes ? unregisterPageLifetimes : emptyFn,\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnDetached') : emptyFn,\n            removeEventListeners,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('detached', lifetimes)\n        ]);\n        // error\n        lifetimes.error = (0, api_1.compose)([\n            invokeComponentHooks ? (0, invokeHook_1.invokeHook)('componentOnError') : emptyFn,\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('error', lifetimes)\n        ]);\n    }\n}\n/**\n * 增加 pageLifetimes 的相关方法注入\n */\nfunction hookPageLifetimes(componentOptions, needsToHookPageLifetimes) {\n    if (!needsToHookPageLifetimes)\n        return;\n    var pageLifetimes = componentOptions.pageLifetimes || {};\n    var originalPageOnShow = pageLifetimes.show;\n    componentOptions.methods.$morPageOnShow = function () {\n        if (originalPageOnShow) {\n            originalPageOnShow.call(this);\n        }\n    };\n    var originalPageOnHide = pageLifetimes.hide;\n    componentOptions.methods.$morPageOnHide = function () {\n        if (originalPageOnHide) {\n            originalPageOnHide.call(this);\n        }\n    };\n    var originalPageOnResize = pageLifetimes.resize;\n    componentOptions.methods.$morPageOnResize = function () {\n        if (originalPageOnResize) {\n            originalPageOnResize.call(this);\n        }\n    };\n    delete componentOptions.pageLifetimes;\n}\n/**\n * 注入 $eventListener 中对应的方法\n */\nfunction hookEventListener(componentOptions) {\n    if (componentOptions.$eventListener) {\n        var eventNames = Object.keys(componentOptions.$eventListener);\n        var data = componentOptions.data;\n        data.$morEventListenerNames = eventNames;\n        eventNames.forEach(function (eventName) {\n            var morEventName = \"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName);\n            componentOptions.methods[morEventName] =\n                componentOptions.$eventListener[eventName];\n        });\n    }\n}\n/**\n * 确保自定义组件选项中必要的值存在\n */\nfunction ensureDataAndMethodsAndLifetimes(options, sourceType) {\n    if (!options.methods)\n        options.methods = {};\n    if (!options.data)\n        options.data = {};\n    if (!options.lifetimes)\n        options.lifetimes = {};\n    // 如果 微信DSL\n    if (sourceType === api_1.SOURCE_TYPE.WECHAT) {\n        // 微信中 lifetimes 中的优先级高于 options 中的方法\n        var created = options.lifetimes.created || options.created;\n        delete options.created;\n        options.lifetimes.created = created;\n        var attached = options.lifetimes.attached || options.attached;\n        delete options.attached;\n        options.lifetimes.attached = attached;\n        var ready = options.lifetimes.ready || options.ready;\n        delete options.ready;\n        options.lifetimes.ready = ready;\n        var moved = options.lifetimes.moved || options.moved;\n        delete options.moved;\n        options.lifetimes.moved = moved;\n        var detached = options.lifetimes.detached || options.detached;\n        delete options.detached;\n        options.lifetimes.detached = detached;\n        var error = options.lifetimes.error || options.error;\n        delete options.error;\n        options.lifetimes.error = error;\n    }\n}\n// 支付宝小程序运行环境\nvar isAlipayTarget = (0, api_1.getEnv)() === api_1.ENV_TYPE.ALIPAY ||\n    (0, api_1.getEnv)() === api_1.ENV_TYPE.DINGDING ||\n    (0, api_1.getEnv)() === api_1.ENV_TYPE.TAOBAO;\nvar WECHAT_COMPONENT_LIFETIMES_METHODS = [\n    'created',\n    'attached',\n    'ready',\n    'moved',\n    'detached',\n    'error'\n];\n/**\n * 支付宝基础库 2.8.5 (2022-12-29) 起新增 lifetimes 定义段，\n * 支持 created、attached 等组件节点树维度的生命周期函数\n */\nvar ALIPAY_COMPONENT_LIFETIMES_METHODS = [\n    'onInit',\n    'deriveDataFromProps',\n    'didMount',\n    'didUpdate',\n    'didUnmount',\n    'onError'\n].concat(WECHAT_COMPONENT_LIFETIMES_METHODS);\nfunction getComponentLifetimesMethods(sourceType) {\n    return sourceType === api_1.SOURCE_TYPE.WECHAT\n        ? WECHAT_COMPONENT_LIFETIMES_METHODS\n        : ALIPAY_COMPONENT_LIFETIMES_METHODS;\n}\n/**\n * 处理 mixins 或 behaviors\n *  - 声明周期方法会进行合并\n *  - methods 会使用最后声明的\n *  - 数据 会进行合并\n * @param componentOptions - Component 参数\n * @param mixinType - mixin 类型, 用于区分 mixin 和 behavior\n * @param sourceType - 源码类型\n */\nfunction processMixinsOrBehaviors(componentOptions, mixinType, sourceType) {\n    var _a;\n    if (!((_a = componentOptions === null || componentOptions === void 0 ? void 0 : componentOptions[mixinType]) === null || _a === void 0 ? void 0 : _a.length))\n        return;\n    var mixins = componentOptions[mixinType];\n    delete componentOptions[mixinType];\n    var lifetimesFunctions = {};\n    var componentLifetimesMethods = getComponentLifetimesMethods(sourceType);\n    // 合并 mixins\n    function processMixins(mixins, \n    // 是否是组件的直接 mixins\n    isComponentDirectMixins) {\n        return mixins.reduce(function (prev, curr) {\n            var _a;\n            if (typeof curr !== 'object') {\n                api_1.logger.error(\"\\u65E0\\u6548\\u7684 \".concat(mixinType, \": \"), curr, '已跳过');\n                return prev;\n            }\n            var result = tslib_1.__assign({}, prev);\n            if (mixinType === 'behaviors') {\n                // 如果是组件直接使用的 behaviors\n                // 需要执行 definitionFilter 方法\n                if (isComponentDirectMixins && curr.definitionFilter) {\n                    curr.definitionFilter(componentOptions);\n                }\n                // 处理 内嵌 behaviors\n                if ((_a = curr === null || curr === void 0 ? void 0 : curr[mixinType]) === null || _a === void 0 ? void 0 : _a.length) {\n                    var childMixins = curr === null || curr === void 0 ? void 0 : curr[mixinType];\n                    delete curr[mixinType];\n                    result = processMixins(tslib_1.__spreadArray([result], childMixins, true), false);\n                }\n            }\n            // 合并 lifetimes, lifetimes 中的函数优先级高\n            var current = tslib_1.__assign(tslib_1.__assign({}, curr), (curr.lifetimes || {}));\n            Object.keys(current).forEach(function (name) {\n                // 不处理 定义段函数\n                if (name === 'definitionFilter')\n                    return;\n                // 合并 数据\n                // 如 props/properties/data/methods\n                if (typeof current[name] === 'object') {\n                    // 对象类型还可能包含数组，对数组做单独处理\n                    if (Array.isArray(curr[name])) {\n                        result[name] = tslib_1.__spreadArray(tslib_1.__spreadArray([], (result[name] || []), true), curr[name], true);\n                    }\n                    else\n                        result[name] = tslib_1.__assign(tslib_1.__assign({}, result[name]), current[name]);\n                }\n                // 合并 方法\n                else if (typeof current[name] === 'function') {\n                    var isLifetimeFn = componentLifetimesMethods.indexOf(name) !== -1;\n                    if (isLifetimeFn) {\n                        lifetimesFunctions[name] = lifetimesFunctions[name] || [];\n                        lifetimesFunctions[name].push(current[name]);\n                    }\n                    // 非 lifetime method 只生效最后一个\n                    else {\n                        if (typeof result[name] === 'function') {\n                            api_1.logger.warn(\"\".concat(mixinType, \" \\u4E2D\\u91CD\\u590D\\u5B9A\\u4E49\\u65B9\\u6CD5, \\u5C06\\u751F\\u6548\\u6700\\u540E\\u58F0\\u660E\\u7684\"), name);\n                        }\n                        result[name] = current[name];\n                    }\n                }\n                // 其他的 赋值\n                else {\n                    result[name] = current[name];\n                }\n            });\n            return result;\n        }, {});\n    }\n    var merged = processMixins(mixins, true);\n    // 合并普通数据或方法\n    Object.keys(merged).forEach(function (name) {\n        if (name in componentOptions) {\n            if (typeof merged[name] === 'object') {\n                var currType = typeof componentOptions[name];\n                if (currType !== 'object') {\n                    api_1.logger.warn(\"\".concat(name, \" \\u5728 \").concat(mixinType, \" \\u4E2D\\u5B9A\\u4E49\\u4E3A object, \\u4F46\\u662F\\u5728\\u5F53\\u524D Component \\u4E3A\").concat(currType));\n                    return;\n                }\n                componentOptions[name] = tslib_1.__assign(tslib_1.__assign({}, merged[name]), componentOptions[name]);\n            }\n        }\n        else {\n            componentOptions[name] = merged[name];\n        }\n    });\n    // 合并 生命周期 函数\n    Object.keys(lifetimesFunctions).forEach(function (name) {\n        var _a;\n        var originalFn = ((_a = componentOptions === null || componentOptions === void 0 ? void 0 : componentOptions.lifetimes) === null || _a === void 0 ? void 0 : _a[name]) || componentOptions[name];\n        componentOptions[name] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            try {\n                for (var _a = 0, _b = lifetimesFunctions[name]; _a < _b.length; _a++) {\n                    var fn = _b[_a];\n                    fn.call.apply(fn, tslib_1.__spreadArray([this], args, false));\n                }\n            }\n            catch (err) {\n                api_1.logger.error(\"\".concat(mixinType, \" \\u51FD\\u6570 \").concat(name, \" \\u62A5\\u9519\"), err);\n            }\n            if (originalFn)\n                originalFn.call.apply(originalFn, tslib_1.__spreadArray([this], args, false));\n        };\n        componentOptions.lifetimes[name] = componentOptions[name];\n    });\n}\n/**\n * 增强 Component 组件\n * @param options - 小程序组件配置\n * @param sourceType - 小程序组件源码类型, 编译时由 Mor 自动填充\n * @param features - 功能特性配置\n */\nfunction enhanceComponent(options, sourceType, features) {\n    if (features === void 0) { features = {}; }\n    api_1.logger.time('component-init');\n    if (!sourceType) {\n        api_1.logger.warn(\"createComponent \\u7F3A\\u5C11 sourceType \\u53EF\\u80FD\\u4F1A\\u5BFC\\u81F4\\u5C0F\\u7A0B\\u5E8F\\u7EC4\\u4EF6\\u521D\\u59CB\\u5316\\u9519\\u8BEF\");\n    }\n    var componentOptions = tslib_1.__assign({}, options);\n    var $morHooks = (0, api_1.getSharedProperty)('$morHooks', options);\n    if (!$morHooks) {\n        api_1.logger.warn('createComponent 依赖于 $morHooks 的初始化, 请检查配置');\n        return componentOptions;\n    }\n    // 确保 data 属性 和 methods 属性\n    ensureDataAndMethodsAndLifetimes(componentOptions, sourceType);\n    // 处理 mixins\n    processMixinsOrBehaviors(componentOptions, 'mixins', sourceType);\n    // 仅非支付宝DSL且目标为支付宝小程序运行环境需要处理 behaviors\n    if (sourceType === api_1.SOURCE_TYPE.WECHAT && isAlipayTarget) {\n        processMixinsOrBehaviors(componentOptions, 'behaviors', sourceType);\n    }\n    // 触发 onConstruct, 兼容旧版本当 componentOnConstruct 不存在时用 componentOnInit 兜底\n    if (features.invokeComponentHooks !== false) {\n        var componentOnConstruct = $morHooks.componentOnConstruct || $morHooks.componentOnInit;\n        componentOnConstruct.call(componentOptions, componentOptions);\n    }\n    // 是否需要添加 页面生命周期 支持，目前仅 支付宝及支付宝相关小程序运行环境 下需要\n    var needsToHookPageLifetimes = componentOptions.pageLifetimes && isAlipayTarget;\n    // 添加 生命周期 hook\n    hookComponentLifeCycle(componentOptions, needsToHookPageLifetimes, sourceType, features.invokeComponentHooks !== false);\n    // 添加 页面生命周期监听\n    hookPageLifetimes(componentOptions, needsToHookPageLifetimes);\n    // 添加 $eventListener 支持\n    hookEventListener(componentOptions);\n    // 跨端支持的组件运行时调用注入位置, '' 空字符串是为了防止该注释被移除\n    // prettier-ignore\n    /* MOR_COMPONENT_POLYFILL_INVOKE_REPLACER */ '';\n    // 执行 component 适配器初始化\n    if (COMPONENT_ADAPTERS === null || COMPONENT_ADAPTERS === void 0 ? void 0 : COMPONENT_ADAPTERS.length) {\n        COMPONENT_ADAPTERS.forEach(function (adapter) {\n            if (typeof (adapter === null || adapter === void 0 ? void 0 : adapter.initComponent) === 'function') {\n                adapter.initComponent(componentOptions);\n            }\n            else {\n                api_1.logger.error(\"adapter.initComponent \\u5FC5\\u987B\\u662F\\u4E00\\u4E2A\\u51FD\\u6570, \\u8BF7\\u68C0\\u67E5\");\n            }\n        });\n    }\n    api_1.logger.timeEnd('component-init');\n    return componentOptions;\n}\nexports.enhanceComponent = enhanceComponent;\n/**\n * Component 组件注册\n * @param options - 小程序组件配置\n * @param sourceType - 小程序组件源码类型, 编译时由 Mor 自动填充\n */\nfunction createComponent(options, sourceType) {\n    api_1.logger.time('component-init');\n    var componentOptions = enhanceComponent(options, sourceType);\n    api_1.logger.timeEnd('component-init');\n    return Component(componentOptions);\n}\nexports.createComponent = createComponent;\n/**\n * 注册组件转端适配器\n * @param adapters - 组件转端适配器\n */\nfunction registerComponentAdapters(adapters) {\n    COMPONENT_ADAPTERS.push.apply(COMPONENT_ADAPTERS, (0, api_1.asArray)(adapters));\n}\nexports.registerComponentAdapters = registerComponentAdapters;\n/**\n * 支付宝 Component 组件注册\n * @param options - 小程序组件配置\n */\nfunction aComponent(options) {\n    return createComponent(options, api_1.SOURCE_TYPE.ALIPAY);\n}\nexports.aComponent = aComponent;\n/**\n * 微信 Component 组件注册\n * @param options - 小程序组件配置\n */\nfunction wComponent(options) {\n    return createComponent(options, api_1.SOURCE_TYPE.WECHAT);\n}\nexports.wComponent = wComponent;\n//# sourceMappingURL=component.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.invokeHook = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\n/**\n * 调用 hook\n * @param hookName hook 名字\n */\nvar invokeHook = function (hookName) {\n    return function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var hook = (_a = (0, api_1.getSharedProperty)('$morHooks', this)) === null || _a === void 0 ? void 0 : _a[hookName];\n        if (typeof (hook === null || hook === void 0 ? void 0 : hook.call) === 'function') {\n            hook.call.apply(hook, tslib_1.__spreadArray([this], args, false));\n        }\n        else {\n            api_1.logger.error(\"\".concat(hookName, \" \\u4E0D\\u662F\\u4E00\\u4E2A\\u6709\\u6548\\u7684 hook\"));\n        }\n    };\n};\nexports.invokeHook = invokeHook;\n//# sourceMappingURL=invokeHook.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wPage = exports.aPage = exports.registerPageAdapters = exports.createPage = exports.enhancePage = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\nvar constants_1 = require(\"./utils/constants\");\nvar invokeHook_1 = require(\"./utils/invokeHook\");\nvar invokeOriginalFunction_1 = require(\"./utils/invokeOriginalFunction\");\nvar isPromise_1 = require(\"./utils/isPromise\");\n// 跨端支持的页面运行时引用注入位置, '' 空字符串是为了防止该注释被移除\n// prettier-ignore\n/* MOR_PAGE_POLYFILL_IMPORT_REPLACER */ '';\n// 转端适配器\nvar PAGE_ADAPTERS = [];\n/**\n * 处理 Page 的生命周期\n */\nfunction hookPageLifeCycle(pageOptions, sourceType) {\n    /**\n     * 增加 appLifetimes 的事件监听\n     *\n     * 使用方法如下:\n     * ```\n     * createPage({\n     *   appLifetimes: {\n     *     show() {}\n     *     hide() {}\n     *   }\n     * })\n     * ```\n     */\n    var registerAppLifetimes = function () {\n        var appLifetimes = this.appLifetimes;\n        if (!appLifetimes)\n            return;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        if (!$event) {\n            return api_1.logger.warn('createPage 中 appLifetimes 的运行依赖 $event，请检查配置');\n        }\n        // app show 支持\n        if (appLifetimes.show) {\n            if (typeof appLifetimes.show === 'function') {\n                appLifetimes.show = appLifetimes.show.bind(this);\n                $event.on(constants_1.APP_ON_SHOW_EVENT, appLifetimes.show);\n            }\n            else {\n                api_1.logger.warn('appLifetimes 的 show 方法必须是 function');\n            }\n        }\n        // app hide 支持\n        if (appLifetimes.hide) {\n            if (typeof appLifetimes.hide === 'function') {\n                appLifetimes.hide = appLifetimes.hide.bind(this);\n                $event.on(constants_1.APP_ON_HIDE_EVENT, appLifetimes.hide);\n            }\n            else {\n                api_1.logger.warn('appLifetimes 的 hide 方法必须是 function');\n            }\n        }\n    };\n    /**\n     * 取消 appLifetimes 的事件监听\n     */\n    var unregisterAppLifetimes = function () {\n        var appLifetimes = this.appLifetimes;\n        if (!appLifetimes)\n            return;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        if (!$event)\n            return;\n        if (appLifetimes.show)\n            $event.off(constants_1.APP_ON_SHOW_EVENT, appLifetimes.show);\n        if (appLifetimes.hide)\n            $event.off(constants_1.APP_ON_HIDE_EVENT, appLifetimes.hide);\n    };\n    /**\n     * 调用事件通知\n     * @param eventName 事件标识\n     */\n    var invokeEvent = function (eventName) {\n        return function (arg) {\n            var $event = (0, api_1.getSharedProperty)('$event', this);\n            if ($event && this.$morPageFlag) {\n                $event.emit(\"$mor:\".concat(eventName, \":\").concat(this.$morPageFlag), arg);\n            }\n        };\n    };\n    /**\n     * 增加 $eventListener 的事件监听\n     */\n    var addEventListeners = function () {\n        var _this = this;\n        var eventListener = this.$eventListener;\n        if (!eventListener)\n            return;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        Object.keys(eventListener).forEach(function (eventName) {\n            /**\n             * 事件需要 bind this，否则实例并非一致\n             * 事件如果绑定在 $eventListener 对象上，而非直接在 this 对象上\n             * 会有隐藏 bug，导致 appx 底层框架在事件内调用 setData 时判断失效\n             */\n            _this[\"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName)] =\n                eventListener[eventName].bind(_this);\n            $event.on(eventName, _this[\"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName)]);\n        });\n    };\n    /**\n     * 去除 $eventListener 的事件监听\n     */\n    var removeEventListeners = function () {\n        var _this = this;\n        var eventListener = this.$eventListener;\n        if (!eventListener)\n            return;\n        var $event = (0, api_1.getSharedProperty)('$event', this);\n        Object.keys(eventListener).forEach(function (eventName) {\n            $event.off(eventName, _this[\"\".concat(constants_1.MOR_EVENT_METHOD_PREFIX).concat(eventName)]);\n        });\n    };\n    /**\n     *  确保必要的标示存在\n     */\n    var ensureViewIdExistance = function () {\n        if (!('$viewId' in this))\n            this.$viewId = (0, api_1.generateId)();\n        this.$morPageFlag = String(this.$viewId);\n    };\n    pageOptions.onLoad = (0, api_1.compose)([\n        ensureViewIdExistance,\n        (0, invokeHook_1.invokeHook)('pageOnLoad'),\n        addEventListeners,\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onLoad', pageOptions),\n        registerAppLifetimes\n    ]);\n    pageOptions.onReady = (0, api_1.compose)([\n        (0, invokeHook_1.invokeHook)('pageOnReady'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onReady', pageOptions),\n        invokeEvent('pageOnReady')\n    ]);\n    pageOptions.onShow = (0, api_1.compose)([\n        (0, invokeHook_1.invokeHook)('pageOnShow'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onShow', pageOptions),\n        invokeEvent('pageOnShow')\n    ]);\n    pageOptions.onHide = (0, api_1.compose)([\n        (0, invokeHook_1.invokeHook)('pageOnHide'),\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onHide', pageOptions),\n        invokeEvent('pageOnHide')\n    ]);\n    pageOptions.onUnload = (0, api_1.compose)([\n        (0, invokeHook_1.invokeHook)('pageOnUnload'),\n        removeEventListeners,\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)('onUnload', pageOptions),\n        unregisterAppLifetimes\n    ]);\n    // resize 支持\n    // 区分支付宝和微信的 onResize 支持\n    if (sourceType === api_1.SOURCE_TYPE.ALIPAY) {\n        pageOptions.events = pageOptions.events || {};\n        var events = pageOptions.events;\n        events.onResize = (0, api_1.compose)([\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('onResize', pageOptions.events),\n            invokeEvent('pageOnResize')\n        ]);\n    }\n    else {\n        pageOptions.onResize = (0, api_1.compose)([\n            (0, invokeOriginalFunction_1.invokeOriginalFunction)('onResize', pageOptions),\n            invokeEvent('pageOnResize')\n        ]);\n    }\n}\n// 通用\nvar PAGE_METHOD_NAMES = {\n    onLoad: {},\n    onShow: {},\n    onHide: {},\n    onReady: {},\n    onUnload: {},\n    onPullDownRefresh: {},\n    onReachBottom: {},\n    /**\n     * 支付宝和微信表现不同\n     * - 支付宝支持 promise, 这里直接对 promise 的结果进行合并\n     * - 微信通过 { promise } 来获取异步结果, 且 3s 自动超时使用缺省内容, 这里仅做对象合并\n     */\n    onShareAppMessage: {\n        r: function (previous, current) {\n            if (previous == null)\n                return current;\n            if (current == null)\n                return previous;\n            if ((0, isPromise_1.isPromise)(previous) || (0, isPromise_1.isPromise)(current)) {\n                return Promise.resolve(previous).then(function (p) {\n                    return Promise.resolve(current).then(function (c) {\n                        if (p == null)\n                            return c;\n                        if (c == null)\n                            return p;\n                        return tslib_1.__assign(tslib_1.__assign({}, p), c);\n                    });\n                });\n            }\n            else {\n                return tslib_1.__assign(tslib_1.__assign({}, previous), current);\n            }\n        }\n    },\n    onPageScroll: {}\n};\n// 微信小程序\nvar WECHAT_METHOD_NAMES = tslib_1.__assign(tslib_1.__assign({}, PAGE_METHOD_NAMES), { onShareTimeline: {\n        r: function (previous, current) {\n            if (previous == null)\n                return current;\n            if (current == null)\n                return previous;\n            return tslib_1.__assign(tslib_1.__assign({}, previous), current);\n        }\n    }, onResize: {}, onAddToFavorites: {} });\n// 支付宝小程序\nvar ALIPAY_METHOD_NAMES = tslib_1.__assign(tslib_1.__assign({}, PAGE_METHOD_NAMES), { onTitleClick: {}, onOptionMenuClick: {}, onPopMenuClick: {}, onPullIntercept: {}, onTabItemTap: {} });\nfunction getPageMethodNames(sourceType) {\n    return sourceType === api_1.SOURCE_TYPE.WECHAT\n        ? WECHAT_METHOD_NAMES\n        : ALIPAY_METHOD_NAMES;\n}\n/**\n * 实现 createPage 的 mixins 机制\n * @param pageOptions\n */\nfunction processMixins(pageOptions, sourceType) {\n    var _a;\n    if (!((_a = pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.mixins) === null || _a === void 0 ? void 0 : _a.length))\n        return;\n    var pageMethodNames = getPageMethodNames(sourceType);\n    var mixins = pageOptions.mixins;\n    delete pageOptions.mixins;\n    var protoFns = {};\n    var merged = mixins.reduce(function (prev, curr) {\n        if (typeof curr !== 'object') {\n            api_1.logger.error('无效的 mixin: ', curr, '已跳过');\n            return prev;\n        }\n        var result = tslib_1.__assign({}, prev);\n        Object.keys(curr).forEach(function (name) {\n            // 合并 数据\n            if (typeof curr[name] === 'object') {\n                // 对象类型还可能包含数组，对数组做单独处理\n                if (Array.isArray(curr[name])) {\n                    result[name] = tslib_1.__spreadArray(tslib_1.__spreadArray([], (result[name] || []), true), curr[name], true);\n                }\n                else\n                    result[name] = tslib_1.__assign(tslib_1.__assign({}, result[name]), curr[name]);\n            }\n            // 合并 方法\n            else if (typeof curr[name] === 'function') {\n                var isProtoFn = name in pageMethodNames;\n                if (isProtoFn) {\n                    protoFns[name] = protoFns[name] || [];\n                    protoFns[name].push(curr[name]);\n                }\n                // 非 proto method 只生效最后一个\n                else {\n                    if (typeof result[name] === 'function') {\n                        api_1.logger.warn('mixins 中重复定义方法，将生效最后声明的', name);\n                    }\n                    result[name] = curr[name];\n                }\n            }\n            // 其他的 赋值\n            else {\n                result[name] = curr[name];\n            }\n        });\n        return result;\n    }, {});\n    Object.keys(merged).forEach(function (name) {\n        if (name in pageOptions) {\n            if (typeof merged[name] === 'object') {\n                var currType = typeof pageOptions[name];\n                if (currType !== 'object') {\n                    api_1.logger.warn(\"\".concat(name, \"\\u5728 mixins \\u4E2D\\u5B9A\\u4E49\\u4E3A object, \\u4F46\\u662F\\u5728\\u5F53\\u524D Page \\u4E3A\").concat(currType));\n                    return;\n                }\n                pageOptions[name] = tslib_1.__assign(tslib_1.__assign({}, merged[name]), pageOptions[name]);\n            }\n        }\n        else {\n            pageOptions[name] = merged[name];\n        }\n    });\n    // 处理 proto 方法的合并\n    Object.keys(protoFns).forEach(function (name) {\n        var originalFn = pageOptions[name];\n        // 返回值\n        var fnConfig = pageMethodNames[name];\n        var result;\n        pageOptions[name] = function () {\n            var _a, _b;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            try {\n                for (var _c = 0, _d = protoFns[name]; _c < _d.length; _c++) {\n                    var fn = _d[_c];\n                    var r = fn.call.apply(fn, tslib_1.__spreadArray([this], args, false));\n                    result = (_a = fnConfig === null || fnConfig === void 0 ? void 0 : fnConfig.r) === null || _a === void 0 ? void 0 : _a.call(fnConfig, result, r);\n                }\n            }\n            catch (err) {\n                api_1.logger.error('mixins 函数报错', err);\n            }\n            if (originalFn) {\n                var r = originalFn.call.apply(originalFn, tslib_1.__spreadArray([this], args, false));\n                result = (_b = fnConfig === null || fnConfig === void 0 ? void 0 : fnConfig.r) === null || _b === void 0 ? void 0 : _b.call(fnConfig, result, r);\n            }\n            if (fnConfig === null || fnConfig === void 0 ? void 0 : fnConfig.r)\n                return result;\n        };\n    });\n}\n/**\n * 增强页面功能: 注入 adapters/hooks、转换声明周期等\n */\nfunction enhancePage(options, sourceType) {\n    if (!sourceType) {\n        api_1.logger.warn(\"createPage \\u7F3A\\u5C11 sourceType \\u53EF\\u80FD\\u4F1A\\u5BFC\\u81F4\\u5C0F\\u7A0B\\u5E8F\\u9875\\u9762\\u521D\\u59CB\\u5316\\u9519\\u8BEF\");\n    }\n    var $morHooks = (0, api_1.getSharedProperty)('$morHooks', options);\n    var pageOptions = tslib_1.__assign({}, options);\n    if (!$morHooks) {\n        api_1.logger.warn('createPage 依赖 $morHooks，请检查配置');\n        return options;\n    }\n    // mixins 支持\n    processMixins(pageOptions, sourceType);\n    // 触发 pageOnConstruct hook, 兼容旧版本当 pageOnConstruct 不存在时用 pageOnInit 兜底\n    var pageOnConstruct = $morHooks.pageOnConstruct || $morHooks.pageOnInit;\n    pageOnConstruct.call(pageOptions, pageOptions);\n    // 添加页面生命周期 hook\n    hookPageLifeCycle(pageOptions, sourceType);\n    // 跨端支持的页面运行时调用注入位置, '' 空字符串是为了防止该注释被移除\n    // prettier-ignore\n    /* MOR_PAGE_POLYFILL_INVOKE_REPLACER */ '';\n    // 执行 page 适配器初始化\n    if (PAGE_ADAPTERS === null || PAGE_ADAPTERS === void 0 ? void 0 : PAGE_ADAPTERS.length) {\n        PAGE_ADAPTERS.forEach(function (adapter) {\n            if (typeof (adapter === null || adapter === void 0 ? void 0 : adapter.initPage) === 'function') {\n                adapter.initPage(pageOptions);\n            }\n            else {\n                api_1.logger.error(\"adapter.initPage \\u5FC5\\u987B\\u662F\\u4E00\\u4E2A\\u51FD\\u6570, \\u8BF7\\u68C0\\u67E5\");\n            }\n        });\n    }\n    return pageOptions;\n}\nexports.enhancePage = enhancePage;\n/**\n * 注册 Page 函数\n */\nfunction createPage(options, sourceType) {\n    api_1.logger.time('page-init');\n    var pageOptions = enhancePage(options, sourceType);\n    api_1.logger.timeEnd('page-init');\n    return Page(pageOptions);\n}\nexports.createPage = createPage;\n/**\n * 注册页面转端适配器\n * @param adapters - 页面转端适配器\n */\nfunction registerPageAdapters(adapters) {\n    PAGE_ADAPTERS.push.apply(PAGE_ADAPTERS, (0, api_1.asArray)(adapters));\n}\nexports.registerPageAdapters = registerPageAdapters;\n/**\n * 支付宝 Page 页面注册\n * @param options - 小程序页面配置\n */\nfunction aPage(options) {\n    return createPage(options, api_1.SOURCE_TYPE.ALIPAY);\n}\nexports.aPage = aPage;\n/**\n * 微信 Page 页面注册\n * @param options - 小程序页面配置\n */\nfunction wPage(options) {\n    return createPage(options, api_1.SOURCE_TYPE.WECHAT);\n}\nexports.wPage = wPage;\n//# sourceMappingURL=page.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isPromise = void 0;\nfunction isPromise(obj) {\n    return (!!obj &&\n        (typeof obj === 'object' || typeof obj === 'function') &&\n        typeof obj.then === 'function');\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wPageToComponent = exports.aPageToComponent = exports.PageToComponent = void 0;\nvar api_1 = require(\"@morjs/api\");\nvar component_1 = require(\"./component\");\nvar page_1 = require(\"./page\");\nvar invokeOriginalFunction_1 = require(\"./utils/invokeOriginalFunction\");\nvar COMPONENT_LIFETIME_MAPPINGS = {\n    onLoad: (_a = {},\n        _a[api_1.SOURCE_TYPE.ALIPAY] = 'onInit',\n        _a[api_1.SOURCE_TYPE.WECHAT] = 'attached',\n        _a),\n    onReady: (_b = {},\n        _b[api_1.SOURCE_TYPE.ALIPAY] = 'didMount',\n        _b[api_1.SOURCE_TYPE.WECHAT] = 'ready',\n        _b),\n    onUnload: (_c = {},\n        _c[api_1.SOURCE_TYPE.ALIPAY] = 'didUnmount',\n        _c[api_1.SOURCE_TYPE.WECHAT] = 'detached',\n        _c)\n};\nvar COMPONENT_PAGE_LIFETIME_MAPPINGS = {\n    onShow: 'show',\n    onHide: 'hide',\n    onResize: 'resize'\n};\n/**\n * 将页面作为组件使用, 仅供特殊场景下的使用\n * 不保证完全的兼容性\n *\n * 转换页面配置为组件配置\n *\n * @param pageOptions - 页面配置\n * @param sourceType - 源码类型\n * @param features - 功能配置\n * @returns 组件配置\n */\nfunction PageToComponent(pageOptions, sourceType, features) {\n    var _a;\n    if (features === void 0) { features = {}; }\n    // 页面增强（含转端逻辑）\n    var opts = (0, page_1.enhancePage)(pageOptions, sourceType);\n    // 直接透传的属性\n    var data = opts.data || {};\n    var observers = opts.observers || {};\n    // 需要插入到 this 的数据\n    var thisData = {};\n    // 组件方法\n    var methods = {};\n    // 组件生命周期\n    var lifetimes = {};\n    // 页面生命周期\n    var pageLifetimes = {};\n    var isAlipaySource = sourceType === api_1.SOURCE_TYPE.ALIPAY;\n    // 兼容支付宝\n    if (isAlipaySource && typeof ((_a = opts === null || opts === void 0 ? void 0 : opts.events) === null || _a === void 0 ? void 0 : _a.onResize) === 'function') {\n        pageLifetimes['resize'] = opts.events.onResize;\n        // 其他事件组件不支持, 直接移除\n        delete opts.events;\n    }\n    // 遍历每一个属性逐个分配\n    for (var key in opts) {\n        var value = opts[key];\n        if (key === 'data')\n            continue;\n        if (key === 'observers')\n            continue;\n        if (key === 'methods') {\n            Object.assign(methods, value || {});\n            continue;\n        }\n        if (key === 'pageLifetimes') {\n            Object.assign(pageLifetimes, value || {});\n            continue;\n        }\n        if (key === 'lifetimes') {\n            Object.assign(lifetimes, value || {});\n            continue;\n        }\n        if (typeof value === 'function') {\n            switch (key) {\n                // 组件生命周期对齐\n                case 'onLoad':\n                case 'onReady':\n                case 'onUnload':\n                    lifetimes[COMPONENT_LIFETIME_MAPPINGS[key][sourceType]] = value;\n                    break;\n                // 页面生命周期对齐\n                case 'onShow':\n                case 'onHide':\n                case 'onResize':\n                    pageLifetimes[COMPONENT_PAGE_LIFETIME_MAPPINGS[key]] = value;\n                    break;\n                // 支付宝或微信原生组件生命周期\n                case 'onInit':\n                case 'didMount':\n                case 'didUnmount':\n                case 'created':\n                case 'attached':\n                case 'ready':\n                case 'detached':\n                    lifetimes[key] = value;\n                    break;\n                // 其他函数配置为方法\n                default:\n                    methods[key] = value;\n                    break;\n            }\n        }\n        // 其他属性直接添加到 thisData\n        else {\n            thisData[key] = value;\n        }\n    }\n    // 转换出来的组件\n    var componentOptions = {\n        data: data,\n        observers: observers,\n        methods: methods,\n        pageLifetimes: pageLifetimes\n    };\n    // 合并 lifetimes\n    Object.assign(componentOptions, lifetimes);\n    // 注入 thisData 到 组件 this 上下文中\n    function injectThisData() {\n        Object.assign(this, thisData);\n    }\n    // 挂载 thisData\n    var hookByLifetime = isAlipaySource ? 'onInit' : 'created';\n    componentOptions[hookByLifetime] = (0, api_1.compose)([\n        injectThisData,\n        (0, invokeOriginalFunction_1.invokeOriginalFunction)(hookByLifetime, componentOptions)\n    ]);\n    // 组件增强（含转端逻辑）\n    return (0, component_1.enhanceComponent)(componentOptions, sourceType, {\n        // 默认为 false\n        invokeComponentHooks: features.invokeComponentHooks == null\n            ? false\n            : features.invokeComponentHooks\n    });\n}\nexports.PageToComponent = PageToComponent;\n/**\n * 支付宝 Page 转组件辅助函数\n * @param options - 小程序页面配置\n * @param features - 功能开关\n * @returns 返回组件配置\n */\nfunction aPageToComponent(options, features) {\n    if (features === void 0) { features = {}; }\n    return PageToComponent(options, api_1.SOURCE_TYPE.ALIPAY, features);\n}\nexports.aPageToComponent = aPageToComponent;\n/**\n * 微信 Page 页面转组件辅助函数\n * @param options - 小程序页面配置\n * @param features - 功能开关\n * @returns 返回组件配置\n */\nfunction wPageToComponent(options, features) {\n    if (features === void 0) { features = {}; }\n    return PageToComponent(options, api_1.SOURCE_TYPE.WECHAT, features);\n}\nexports.wPageToComponent = wPageToComponent;\n//# sourceMappingURL=pageToComponent.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wPlugin = exports.aPlugin = exports.createPlugin = void 0;\nvar tslib_1 = require(\"tslib\");\nvar api_1 = require(\"@morjs/api\");\n/**\n * 插件构造函数\n * @param options - 插件选项\n * @param options.getApp - 插件使用的 getApp 构造函数\n * @returns Mor 小程序插件对象 (用于和宿主小程序交换数据或能力)\n */\nfunction createPlugin(pluginOptions) {\n    var getApp = (pluginOptions || {}).getApp;\n    if (typeof getApp === 'undefined') {\n        api_1.logger.error('插件入口必须传 getApp');\n        return;\n    }\n    delete pluginOptions.getApp;\n    var app = getApp();\n    var plugin = tslib_1.__assign(tslib_1.__assign({ getApp: getApp, $isMorPlugin: true }, pluginOptions), { internalInit: function (options) {\n            var $hostEvent = (options !== null && options !== void 0 ? options : {}).$event;\n            // 宿主的 event\n            if (!this.$hostEvent && $hostEvent) {\n                this.$hostEvent = $hostEvent;\n                var app_1 = this.getApp();\n                app_1.$hostEvent = $hostEvent;\n            }\n        }, morInit: function (extend) {\n            var app = this.getApp();\n            if (!app.$host)\n                app.$host = {};\n            Object.keys(extend).forEach(function (name) {\n                app.$host[name] = extend[name];\n            });\n        } });\n    if (app.$event)\n        plugin.$pluginEvent = app.$event;\n    return plugin;\n}\nexports.createPlugin = createPlugin;\n/**\n * 支付宝插件构造函数\n */\nfunction aPlugin() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return createPlugin.apply(void 0, args);\n}\nexports.aPlugin = aPlugin;\n/**\n * 微信插件构造函数\n */\nfunction wPlugin() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return createPlugin.apply(void 0, args);\n}\nexports.wPlugin = wPlugin;\n//# sourceMappingURL=plugin.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar api_1 = require(\"@morjs/api\");\n(function morPolyfill() {\n    try {\n        Promise.prototype.finally =\n            Promise.prototype.finally ||\n                function morPolyfillPromiseFinally(onFinally) {\n                    var isFunction = typeof onFinally === 'function';\n                    return this.then(isFunction\n                        ? function (value) {\n                            return Promise.resolve(onFinally()).then(function () {\n                                return value;\n                            });\n                        }\n                        : onFinally, isFunction\n                        ? function (reason) {\n                            return Promise.resolve(onFinally()).then(function () {\n                                throw reason;\n                            });\n                        }\n                        : onFinally);\n                };\n    }\n    catch (err) {\n        api_1.logger.error('polyfill', err);\n    }\n})();\n//# sourceMappingURL=polyfill.js.map"]}